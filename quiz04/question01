#written by Mark Shperkin
import pandas as pd

#load first dataset
customer_df = pd.read_csv("customer_data.csv")
print("question01\na.")
#display the number of rows and columns (features)
num_rows, num_columns = customer_df.shape
print(f"Number of rows: {num_rows}")
print(f"Number of features (columns): {num_columns}")

#display the domains of each feature
for column in customer_df.columns:
    unique_values = customer_df[column].unique()
    num_unique_values = len(unique_values)
    print(f"\nFeature: {column}")
    print(f"Number of unique values: {num_unique_values}")
    print("Unique values:")
    print(unique_values)

#display statistics
numerical_stats = customer_df.describe()
print("\nStatistics for numerical features:")
print(numerical_stats)
print("b) 1.")
#check for missing data
missing_data = customer_df.isnull().sum()
print("Missing data:")
print(missing_data)
print("2.")
#load second dataset
sales_df = pd.read_csv("sales_data.csv")

product_category_column = 'category'
number_of_items_column = 'quantity'

#number of unique categories
unique_categories = sales_df[product_category_column].nunique()

#largest number of items bought in any category
largest_items_category = sales_df.groupby(product_category_column)[number_of_items_column].max().idxmax()
largest_items_count = sales_df.groupby(product_category_column)[number_of_items_column].max().max()

print(f"Number of unique product categories: {unique_categories}")
print(f"Largest number of items bought in any category: {largest_items_count} (Category: {largest_items_category})")

print("3.")
#merge datasets
merged_df = pd.merge(sales_df, customer_df, on='customer_id')

gender_column = 'gender'
product_name_column = 'category'
number_of_items_column = 'quantity'

gender_purchases = merged_df.groupby(gender_column)[number_of_items_column].sum()
print(f"Total items bought by each gender:\n{gender_purchases}")

#top three things bought by females
top_three_items_female = merged_df[merged_df[gender_column] == 'Female'].groupby(product_name_column)[number_of_items_column].sum().nlargest(3)
print(f"\nTop three things bought by females:\n{top_three_items_female}")

#top three things bought by males
top_three_items_male = merged_df[merged_df[gender_column] == 'Male'].groupby(product_name_column)[number_of_items_column].sum().nlargest(3)
print(f"\nTop three things bought by males:\n{top_three_items_male}")

print("4.")

payment_method_column = 'payment_method'

most_used_payment_method = customer_df[payment_method_column].value_counts().idxmax()
print(f"Most used payment method: {most_used_payment_method}")

print("5.")

#convert 'invoice_date' to datetime format with the correct format
sales_df['invoice_date'] = pd.to_datetime(sales_df['invoice_date'], format='%d-%m-%Y')

#extract the month from 'invoice_date'
sales_df['month'] = sales_df['invoice_date'].dt.month

most_purchases_month = sales_df['month'].value_counts().idxmax()
print(f"Month with the most purchases: {most_purchases_month}")

print("6.")

#create bins and labels
bins = [0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000]
labels = ['0-500', '501-1000', '1001-1500', '1501-2000', '2001-2500', '2501-3000', '3001-3500', '3501-4000', '4001-4500', '4501-5000']

#create a new column 'purchase_bin' with the bin labels
sales_df['purchase_bin'] = pd.cut(sales_df['price'], bins=bins, labels=labels, right=False)

highest_purchase_bin = sales_df.groupby('purchase_bin')['price'].sum().idxmax()
print(f"a. Bin with the highest purchase: {highest_purchase_bin}")

most_purchases_bin = sales_df['purchase_bin'].value_counts().idxmax()
print(f"b. Bin with the most purchases: {most_purchases_bin}")

most_purchases_month = sales_df['month'].value_counts().idxmax()

filtered_df = sales_df[sales_df['month'] == most_purchases_month]

most_purchases_bin_month = filtered_df['purchase_bin'].value_counts().idxmax()
print(f"c. Bin with the most purchases in the month with the most purchases: {most_purchases_bin_month}")

#compare with 6b
print(f"Is it the same as 6b? {'Yes' if most_purchases_bin_month == most_purchases_bin else 'No'}")



